// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //// Replace this comment with your code.
    Mux16(a=false, 
    b=instruction, 
    sel=instruction[15], 
    out[0]=jGT,
    out[1]=jEQ,
    out[2]=jLT,
    out[3]=destM,
    out[3]=writeM,
    out[4]=destD,
    out[5]=destA,
    out[6]=aluNo,
    out[7]=aluF,
    out[8]=aluNy,
    out[9]=aluZy,
    out[10]=aluNx,
    out[11]=aluZx,
    out[12]=aOrM,
    // 13, 14 unused
    out[15]=cType);
    ALU(x=xIn, y=yIn, zx=aluZx, nx=aluNx, zy=aluZy, ny=aluNy, f=aluF, no=aluNo, out=outM, out=aluOut, zr=zero, ng=negative);
    Mux16(a=instruction, b=aluOut, sel=cType, out=muxOut);

    Not(in=cType, out=notCType);
    Or(a=notCType, b=destA, out=loadA);
    ARegister(in=muxOut, load=loadA, out=outRegA, out[0..14]=addressM);
    DRegister(in=aluOut, load=destD, out=xIn);
    Mux16(a=outRegA, b=inM, sel=aOrM, out=yIn);
    
    Or(a=zero, b=negative, out=zerOrNeg);
    Not(in=zerOrNeg, out=positiv);

    And(a=jGT, b=positiv, out=grt);
    And(a=jEQ, b=zero, out=eql);
    And(a=jLT, b=negative, out=lth);
    Or(a=grt, b=eql, out=orGrtEq);
    Or(a=orGrtEq, b=lth, out=jump);
    PC(in=outRegA, load=jump, inc=true, reset=reset, out[0..14]=pc, out[15]=false);
}
